(function () { var api; htmx.defineExtension("sse", { init: function (apiRef) { api = apiRef; if (htmx.createEventSource == undefined) { htmx.createEventSource = createEventSource } }, onEvent: function (name, evt) { var parent = evt.target || evt.detail.elt; switch (name) { case "htmx:beforeCleanupElement": var internalData = api.getInternalData(parent); if (internalData.sseEventSource) { internalData.sseEventSource.close() } return; case "htmx:afterProcessNode": ensureEventSourceOnElement(parent) } } }); function createEventSource(url) { return new EventSource(url, { withCredentials: true }) } function splitOnWhitespace(trigger) { return trigger.trim().split(/\s+/) } function getLegacySSEURL(elt) { var legacySSEValue = api.getAttributeValue(elt, "hx-sse"); if (legacySSEValue) { var values = splitOnWhitespace(legacySSEValue); for (var i = 0; i < values.length; i++) { var value = values[i].split(/:(.+)/); if (value[0] === "connect") { return value[1] } } } } function getLegacySSESwaps(elt) { var legacySSEValue = api.getAttributeValue(elt, "hx-sse"); var returnArr = []; if (legacySSEValue != null) { var values = splitOnWhitespace(legacySSEValue); for (var i = 0; i < values.length; i++) { var value = values[i].split(/:(.+)/); if (value[0] === "swap") { returnArr.push(value[1]) } } } return returnArr } function registerSSE(elt) { queryAttributeOnThisOrChildren(elt, "sse-swap").forEach(function (child) { var sourceElement = api.getClosestMatch(child, hasEventSource); if (sourceElement == null) { return null } var internalData = api.getInternalData(sourceElement); var source = internalData.sseEventSource; var sseSwapAttr = api.getAttributeValue(child, "sse-swap"); if (sseSwapAttr) { var sseEventNames = sseSwapAttr.split(",") } else { var sseEventNames = getLegacySSESwaps(child) } for (var i = 0; i < sseEventNames.length; i++) { var sseEventName = sseEventNames[i].trim(); var listener = function (event) { if (maybeCloseSSESource(sourceElement)) { return } if (!api.bodyContains(child)) { source.removeEventListener(sseEventName, listener); return } if (!api.triggerEvent(elt, "htmx:sseBeforeMessage", event)) { return } swap(child, event.data); api.triggerEvent(elt, "htmx:sseMessage", event) }; api.getInternalData(child).sseEventListener = listener; source.addEventListener(sseEventName, listener) } }); queryAttributeOnThisOrChildren(elt, "hx-trigger").forEach(function (child) { var sourceElement = api.getClosestMatch(child, hasEventSource); if (sourceElement == null) { return null } var internalData = api.getInternalData(sourceElement); var source = internalData.sseEventSource; var sseEventName = api.getAttributeValue(child, "hx-trigger"); if (sseEventName == null) { return } if (sseEventName.slice(0, 4) != "sse:") { return } sseEventName = sseEventName.substr(4); var listener = function () { if (maybeCloseSSESource(sourceElement)) { return } if (!api.bodyContains(child)) { source.removeEventListener(sseEventName, listener) } } }) } function ensureEventSourceOnElement(elt, retryCount) { if (elt == null) { return null } queryAttributeOnThisOrChildren(elt, "sse-connect").forEach(function (child) { var sseURL = api.getAttributeValue(child, "sse-connect"); if (sseURL == null) { return } ensureEventSource(child, sseURL, retryCount) }); queryAttributeOnThisOrChildren(elt, "hx-sse").forEach(function (child) { var sseURL = getLegacySSEURL(child); if (sseURL == null) { return } ensureEventSource(child, sseURL, retryCount) }); registerSSE(elt) } function ensureEventSource(elt, url, retryCount) { var source = htmx.createEventSource(url); source.onerror = function (err) { api.triggerErrorEvent(elt, "htmx:sseError", { error: err, source: source }); if (maybeCloseSSESource(elt)) { return } if (source.readyState === EventSource.CLOSED) { retryCount = retryCount || 0; var timeout = Math.random() * (2 ^ retryCount) * 500; window.setTimeout(function () { ensureEventSourceOnElement(elt, Math.min(7, retryCount + 1)) }, timeout) } }; source.onopen = function (evt) { api.triggerEvent(elt, "htmx:sseOpen", { source: source }) }; api.getInternalData(elt).sseEventSource = source } function maybeCloseSSESource(elt) { if (!api.bodyContains(elt)) { var source = api.getInternalData(elt).sseEventSource; if (source != undefined) { source.close(); return true } } return false } function queryAttributeOnThisOrChildren(elt, attributeName) { var result = []; if (api.hasAttribute(elt, attributeName)) { result.push(elt) } elt.querySelectorAll("[" + attributeName + "], [data-" + attributeName + "]").forEach(function (node) { result.push(node) }); return result } function swap(elt, content) { api.withExtensions(elt, function (extension) { content = extension.transformResponse(content, null, elt) }); var swapSpec = api.getSwapSpecification(elt); var target = api.getTarget(elt); var settleInfo = api.makeSettleInfo(elt); api.selectAndSwap(swapSpec.swapStyle, target, elt, content, settleInfo); settleInfo.elts.forEach(function (elt) { if (elt.classList) { elt.classList.add(htmx.config.settlingClass) } api.triggerEvent(elt, "htmx:beforeSettle") }); if (swapSpec.settleDelay > 0) { setTimeout(doSettle(settleInfo), swapSpec.settleDelay) } else { doSettle(settleInfo)() } } function doSettle(settleInfo) { return function () { settleInfo.tasks.forEach(function (task) { task.call() }); settleInfo.elts.forEach(function (elt) { if (elt.classList) { elt.classList.remove(htmx.config.settlingClass) } api.triggerEvent(elt, "htmx:afterSettle") }) } } function hasEventSource(node) { return api.getInternalData(node).sseEventSource != null } })();
